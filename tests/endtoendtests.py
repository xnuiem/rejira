#test caching#test jira connection#unit testsimport unittestimport jsonimport loggingimport sysimport inspectimport osfrom customassertions import CustomAssertionsfrom mockFields import field_mapcmd_folder = os.path.abspath(os.path.join(os.path.split(inspect.getfile(    inspect.currentframe()))[0], ".."))if cmd_folder not in sys.path:    sys.path.insert(0, cmd_folder)from rejira import ReJIRAdef str_to_bool(s):    if s == 'True':        return True    elif s == 'False':        return False    else:        raise ValueErrorclass ReJIRAEndToEndTest(unittest.TestCase, CustomAssertions):    def setUp(self):        self.config.cache_host = os.getenv('REJIRA_CACHE_HOST', 'localhost')        self.config.cache_port = os.getenv('REJIRA_CACHE_PORT', 6379)        self.config.cache_db = os.getenv('REJIRA_CACHE_DB', 0)        self.config.cache_on = str_to_bool(os.getenv('REJIRA_CACHE_ON', True))        self.config.cache_expire = os.getenv('REJIRA_CACHE_EXPIRE', 3600)        self.config.jira_user = os.getenv('REJIRA_JIRA_USER', '')        self.config.jira_pass = os.getenv('REJIRA_JIRA_PASS', '')        self.config.jira_options["server"] = os.getenv('REJIRA_JIRA_SERVER', '')        self.config.logging_level = os.getenv('REJIRA_LOGGING_LEVEL', 'ERROR')        self.config.logging_file = os.getenv('REJIRA_LOGGING_FILE', '')        logging.basicConfig(level=self.config.logging_level)        logger = logging.getLogger(__name__)        if self.config.logging_file:            handler = logging.FileHandler(self.config.logging_file)            handler.setLevel(logging.INFO)            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s', "%Y-%m-%d %H:%M:%S")            handler.setFormatter(formatter)            logger.addHandler(handler)    def test_get_jira(self):        pass    def test_search_jira(self):        pass    def test_get_cache(self):        pass    def test_search_cache(self):        pass    def test_flush_issue(self):        pass    def test_flush_all(self):        pass    def test_logging_to_file(self):        log_file = "rejira-test.log"        os.environ["REJIRA_LOGGING_LEVEL"] = "DEBUG"        os.environ["REJIRA_LOGGING_FILE"] = log_file        rj = ReJIRA(self.config, field_map)        issue_key = "OM-1"        issue = rj.get(issue_key)        self.assertTrue(os.path.isfile(log_file))        os.environ["REJIRA_LOGGING_LEVEL"] = "WARN"        os.environ["REJIRA_LOGGING_FILE"] = ""        os.remove(log_file)if __name__ == '__main__':    unittest.main()