import unittestimport jsonimport loggingimport sysimport inspectimport osfrom ddt import ddt, datafrom customassertions import CustomAssertionsfrom mockFields import field_mapcmd_folder = os.path.abspath(os.path.join(os.path.split(inspect.getfile(    inspect.currentframe()))[0], ".."))if cmd_folder not in sys.path:    sys.path.insert(0, cmd_folder)from rejira.lib.issue import Issuefrom example import configdef str_to_bool(s):    if s == 'True':        return True    elif s == 'False':        return False    else:        raise ValueError@ddtclass ReJIRAUnitTest(unittest.TestCase, CustomAssertions):    def setUp(self):        self.config = self.setup_config()        self.logging = self.setup_logging()    def tearDown(self):        del self.config        del self.logging    @staticmethod    def get_req(file_name):        with open(file_name, 'r') as file:            data = file.read()            file.close()        return json.loads(data)    def create_issue(self):        return Issue(self.config, self.logging)    @staticmethod    def setup_config():        config.cache_host = os.getenv('REJIRA_CACHE_HOST', 'localhost')        config.cache_port = os.getenv('REJIRA_CACHE_PORT', 6379)        config.cache_db = os.getenv('REJIRA_CACHE_DB', 0)        config.cache_on = str_to_bool(os.getenv('REJIRA_CACHE_ON', True))        config.cache_expire = os.getenv('REJIRA_CACHE_EXPIRE', 3600)        config.jira_user = os.getenv('REJIRA_JIRA_USER', '')        config.jira_pass = os.getenv('REJIRA_JIRA_PASS', '')        config.jira_options["server"] = os.getenv('REJIRA_JIRA_SERVER', '')        config.logging_level = os.getenv('REJIRA_LOGGING_LEVEL', 'ERROR')        config.logging_file = os.getenv('REJIRA_LOGGING_FILE', '')        return config    def setup_logging(self):        logging.basicConfig(level=self.config.logging_level)        logger = logging.getLogger(__name__)        if self.config.logging_file:            handler = logging.FileHandler(self.config.logging_file)            handler.setLevel(logging.INFO)            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s', "%Y-%m-%d %H:%M:%S")            handler.setFormatter(formatter)            logger.addHandler(handler)        return logger    def test_issue_close(self):        issue = self.create_issue()        issue.close()        self.assertAttrNotExists(issue, "config")        self.assertAttrNotExists(issue, "logger")    @data('mock-req-1.txt', 'mock-req-2.txt', 'mock-req-3.txt')    def test_issue_handle_sprint(self, file_name):        req = self.get_req(file_name)        issue = self.create_issue()        sprint_obj = issue.handle_sprint(req["fields"])        if file_name != 'mock-req-2.txt':            self.assertAttrExists(sprint_obj, "name")            self.assertAttrExists(sprint_obj, "state")            self.assertAttrExists(sprint_obj, "completeDate")            self.assertEqual(sprint_obj.name, 'OM Sprint 1')            self.assertEqual(sprint_obj.state, 'ACTIVE')            self.assertEqual(sprint_obj.completeDate, '<null>')        else:            self.assertIsNone(sprint_obj)    '''    def test_issue_handle_list(self):        pass    def test_issue_handle_dict(self):        pass    def test_issue_handle_custom(self):        pass    def test_issue_handle_dates(self):        pass    def test_issue_handle_comments(self):        pass'''if __name__ == '__main__':    unittest.main()