import unittestimport jsonimport loggingimport sysimport inspectimport osfrom customassertions import CustomAssertionsfrom mockFields import field_mapcmd_folder = os.path.abspath(os.path.join(os.path.split(inspect.getfile(    inspect.currentframe()))[0], ".."))if cmd_folder not in sys.path:    sys.path.insert(0, cmd_folder)from rejira.lib.issue import Issuefrom rejira import ReJIRAfrom example import configdef str_to_bool(s):    if s == 'True':        return True    elif s == 'False':        return False    else:        raise ValueErrorclass ReJIRATest(unittest.TestCase, CustomAssertions):    def setUp(self):        self.config = self.setup_config()        self.logging = self.setup_logging()        with open('mock-req-1.txt', 'r') as file:            data = file.read()            file.close()        self.req = json.loads(data)    def create_issue(self):        return Issue(self.config, self.logging)    @staticmethod    def setup_config():        config.cache_host = os.getenv('REJIRA_CACHE_HOST', 'localhost')        config.cache_port = os.getenv('REJIRA_CACHE_PORT', 6379)        config.cache_db = os.getenv('REJIRA_CACHE_DB', 0)        config.cache_on = str_to_bool(os.getenv('REJIRA_CACHE_ON', True))        config.cache_expire = os.getenv('REJIRA_CACHE_EXPIRE', 3600)        config.jira_user = os.getenv('REJIRA_JIRA_USER', '')        config.jira_pass = os.getenv('REJIRA_JIRA_PASS', '')        config.jira_options["server"] = os.getenv('REJIRA_JIRA_SERVER', '')        config.logging_level = os.getenv('REJIRA_LOGGING_LEVEL', 'ERROR')        config.logging_file = os.getenv('REJIRA_LOGGING_FILE', '')        return config    def setup_logging(self):        logging.basicConfig(level=self.config.logging_level)        logger = logging.getLogger(__name__)        if self.config.logging_file:            handler = logging.FileHandler(self.config.logging_file)            handler.setLevel(logging.INFO)            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s', "%Y-%m-%d %H:%M:%S")            handler.setFormatter(formatter)            logger.addHandler(handler)        return logger    def test_issue_close(self):        issue = self.create_issue()        issue.create_object(self.req, field_map)        self.assertAttrNotExists(issue, "config")        self.assertAttrNotExists(issue, "logger")    def test_handle_sprint(self):        issue = self.create_issue()        sprint_obj = issue.handle_sprint(self.req["fields"])        self.assertAttrExists(sprint_obj, "name")        self.assertAttrExists(sprint_obj, "state")        self.assertAttrExists(sprint_obj, "completeDate")        self.assertEqual(sprint_obj.name, 'OM Sprint 1')        self.assertEqual(sprint_obj.state, 'ACTIVE')        self.assertEqual(sprint_obj.completeDate, '<null>')    def test_smoke_sprint(self):        issue = self.create_issue()        issue.create_object(self.req, field_map)        self.assertAttrExists(issue, "sprint")        self.assertEqual(issue.sprint.name, 'OM Sprint 1')        self.assertEqual(issue.sprint.state, 'ACTIVE')        self.assertEqual(issue.sprint.completeDate, '<null>')    def test_get(self):        rj = ReJIRA(self.config, field_map)        issue_key = "OM-1"        issue = rj.get(issue_key)        self.assertAttrNotExists(issue, "author")        self.assertAttrExists(issue, "creator")        self.assertEqual(issue.key, issue_key)    def test_search(self):        rj = ReJIRA(self.config, field_map)        results = rj.search("project = OM order by lastViewed DESC")        self.assertIsList(results)        # check to ensure there are actual issue objects in there too    def test_expire(self):        # make sure caching is on and no errors when connecting to redis        pass    def test_logging_to_file(self):        log_file = "rejira-test.log"        os.environ["REJIRA_LOGGING_LEVEL"] = "DEBUG"        os.environ["REJIRA_LOGGING_FILE"] = log_file        rj = ReJIRA(self.config, field_map)        issue_key = "OM-1"        issue = rj.get(issue_key)        self.assertTrue(os.path.isfile(log_file))        os.environ["REJIRA_LOGGING_LEVEL"] = "WARN"        os.environ["REJIRA_LOGGING_FILE"] = ""        os.remove(log_file)    def test_cache(self):        os.environ["REJIRA_CACHE_ON"] = 'True'        self.config.cache_on = True        from rejira.lib.datasource import DataSource        import hashlib        s = DataSource(self.config, self.logging)        s.flush_all()        rj = ReJIRA(self.config, field_map)        issue_key = "OM-1"        #issue = rj.get(issue_key)        #results = rj.search("project = OM order by lastViewed DESC")        #hash_key = hashlib.sha256(query.encode('utf-8')).hexdigest()        self.assertTrue(s.exists(issue_key))        self.assertFalse(s.exists('dkdkkdkd'))        #self.assertTrue(s.exists())        #insert 2 issues and 1 query        #check something        #flush one        #check        #flush all    def test_jira(self):        passif __name__ == '__main__':    unittest.main()